users:
  get:
    deprecated: true
    security:
      - JWT: []
    description: Get Users
    tags:
      - Deprecated
    responses:
      '200':
        description: Return array of users
        schema:
          type: array
          items:
            $ref: '../definitions/nodes.yaml#/User'
      '401':
        description: 'Error: Not Authenticated'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
      '403':
        description: 'Error: Unauthorized Access'
        schema:
          $ref: '../definitions/errors.yaml#/UnauthorizedError'
      '500':
        description: 'Error: Server Error'
        schema:
          $ref: '../definitions/errors.yaml#/Error'

user:
  parameters:
    - name: userId
      in: path
      description: User Id
      required: true
      type: string
  get:
    deprecated: true
    security:
      - JWT: []
    description: Get User (empty answer, 200 even if ID is false) - [REPLACED BY] GET /nodes/user/{nodeId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns User
        schema:
          $ref: '../definitions/nodes.yaml#/User'
      '401':
        description: 'Error: Not Authenticated'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
      '403':
        description: 'Error: Unauthorized Access'
        schema:
          $ref: '../definitions/errors.yaml#/UnauthorizedError'
      '500':
        description: 'Error: Server Error'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
  patch:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: properties
        in: body
        description: User properties to update
        required: true
        schema:
          type: object
          required:
            - property
          properties:
            property:
              type: string
            value:
              type: string
    description: Update User - [REPLACED BY] PATCH /nodes/user/{nodeId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns User
        schema:
          $ref: '../definitions/nodes.yaml#/User'
      '401':
        description: 'Error: Not Authenticated'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
      '403':
        description: 'Error: Unauthorized Access'
        schema:
          $ref: '../definitions/errors.yaml#/UnauthorizedError'
      '500':
        description: 'Error: Server Error'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
  put:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: content
        in: body
        description: User properties to update
        required: true
        schema:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
            pict:
              type: string
            newPassword:
              type: string
    description: Update Whole User - [REPLACED BY] PATCH /nodes/user/{nodeId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns User
        schema:
          $ref: '../definitions/nodes.yaml#/User'
      '401':
        description: 'Error: Not Authenticated'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
      '403':
        description: 'Error: Unauthorized Access'
        schema:
          $ref: '../definitions/errors.yaml#/UnauthorizedError'
      '500':
        description: 'Error: Server Error'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
  delete:
    deprecated: true
    security:
      - JWT: []
    description: Delete User - [REPLACED BY] DELETE /nodes/user/{nodeId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns Success Message
        type: string
        example: Successfully deleted.
      '401':
        description: 'Error: Not Authenticated'
        schema:
          $ref: '../definitions/errors.yaml#/Error'
      '403':
        description: 'Error: Unauthorized Access'
        schema:
          $ref: '../definitions/errors.yaml#/UnauthorizedError'
      '500':
        description: 'Error: Server Error'
        schema:
          $ref: '../definitions/errors.yaml#/Error'

newRelationship:
  parameters:
    - name: nodetype
      in: path
      description: Source Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Source Node Id
      required: true
      type: string
    - name: relname
      in: path
      description: Relationship Name
      required: true
      type: string
    - name: targetNodeType
      in: path
      description: Target Nodetype Name
      required: true
      type: string
    - name: targetnodeId
      in: path
      description: Target Node Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: "Add Relationship - [REPLACED BY] POST /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}"
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns created relationship
        schema:
          $ref: '../definitions/relationships.yaml#/Relationship'
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

lock:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: 'Lock Node - [REPLACED BY] PATCH /nodes/{nodetype}/{nodeId} with body = { lock: true }'
    tags:
      - Deprecated
    responses:
      $ref: '../responses/nodes.yaml#/node'

unlock:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: 'Unlock Node - [REPLACED BY] PATCH /nodes/{nodetype}/{nodeId} with body = { lock: false }'
    tags:
      - Deprecated
    responses:
      $ref: '../responses/nodes.yaml#/node'

lockstate:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  get:
    deprecated: true
    security:
      - JWT: []
    description: Get Node's LockState - [ UNUSED ]
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns boolean true or false
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

lifecycleStateOwner:
  get:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
    description: Check if user is Lifecycle Owner of a node - [ UNUSED ]
    tags:
      - Deprecated
    responses:
      "200":
        description: "isLifecycleStateOwner: boolean"
        schema:
          $ref: "#/definitions/Node"
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

uniqueFields:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: content
        in: body
        description: "Relationship Ids"
        required: true
        schema:
          type: object
          required:
            - nodetypeName
          properties:
            nodetypeName:
              type: string
            nodeId:
              type: string
            fields:
              type: array
              items:
                type: object
    description: Check Unique Fields
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns true
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

recursive:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
      - name: content
        in: body
        description: "Relationship Ids"
        required: true
        schema:
          type: object
          required:
            - relationships
          properties:
            relationships:
              type: array
              items:
                type: string
    description: Get Node's Multilevel - [ REPLACED BY ] POST /nodes/{nodetype}/{nodeId}/relationships?recursive=true;
    tags:
      - Deprecated
    responses:
      "200":
        description: arrays of relationships
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

promote:
  parameters:
    - name: content
      in: body
      required: true
      description: Comment
      schema:
        type: object
        properties:
          comment:
            type: string
          params:
            type: object
        example:
          comment: "Ok for review"
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
    - name: currentStateId
      in: path
      description: Current State Id
      required: true
      type: string
    - name: targetStateId
      in: path
      description: Target State Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: "Promote Node - [REPLACED BY] POST /nodes/{nodetype}/{nodeId}/promote"
    tags:
      - Deprecated
    responses:
      $ref: '../responses/nodes.yaml#/node'

serializations:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
      - name: serialization
        in: body
        schema:
          type: object
          properties:
            instanciationId:
              type: string
              example: nti_1d16e880-8cb2-11eb-895c-9781a94f62a0
              description: Instanciation Nodetype Id
            serialize:
              type: boolean
              example: true
              description: "'true' to serialize, 'false' to delete serialization"
    description: Serialize Node - [REPLACED BY] PATCH /nodes/{nodetype}/{nodeId}
    tags:
      - Deprecated
    responses:
      $ref: '../responses/nodes.yaml#/node'

nodeAction:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
      - name: actionId
        in: path
        description: Action Id
        required: true
        type: string
    description: Run Node Action - [REPLACED BY] POST /nodes/{nodetype}/{nodeId}/actions/{actionId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns object
        schema:
          type: object
          properties:
            success:
              type: boolean
            message:
              type: string
            methodResult:
              type: object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

nodetypeAction:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: actionId
        in: path
        description: Action Id
        required: true
        type: string
    description: Run Nodetype Action - [REPLACED BY] POST /nodes/{nodetype}/actions/{actionId}
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns object
        schema:
          type: object
          properties:
            success:
              type: boolean
            message:
              type: string
            methodResult:
              type: object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

accessRoles:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  get:
    deprecated: true
    security:
      - JWT: []
    description: Get Node's Access Roles - [REPLACED BY] GET /nodes/{nodetype}/{nodeId}/relationships/{relationshipName} (relationshipName = accessRole)
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

accessRole:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
    - name: rolename
      in: path
      description: Role Name
      required: true
      type: string
    - name: identity
      in: path
      description: Identity Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: Set Node's Access Roles - [REPLACED BY] POST /nodes/{nodetype}/{nodeId}/relationships/{relationshipName} (relationshipName = accessRole)
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
  delete:
    deprecated: true
    security:
      - JWT: []
    description: Remove Node's Access Roles - [REPLACED BY] DELETE /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}/{relationshipId} (relationshipName = accessRole)
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

lifecycleRole:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
    - name: rolename
      in: path
      description: Lifecycle Role Name
      required: true
      type: string
    - name: userId
      in: path
      description: User Id
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: content
        in: body
        description: Nodetype name
        required: true
        schema:
          type: object
          required:
            - value
          properties:
            value:
              type: string
    description: Set Node Lifecycle Role - [REPLACED BY] POST /nodes/{nodetype}/{nodeId}/relationships/{relationshipName} (relationship name = lifecycleRole)
    tags:
      - Deprecated
    responses:
      "200":
        description: object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
  delete:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: content
        in: body
        description: Nodetype name
        required: true
        schema:
          type: object
          required:
            - value
          properties:
            value:
              type: string
    description: Remove Node Lifecycle Role - [REPLACED BY] DELETE /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}/{relationshipId} (relationship name = lifecycleRole)
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns true
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

lifecycleAssignments:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  get:
    security:
      - JWT: []
    description: Get Node's Lifecycle Assignments
    tags:
      - Nodes
    responses:
      "200":
        description: Object including assignment and assignmentFor relationship
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
  post:
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
    description: Create a node assignment
    tags:
      - Nodes
    responses:
      "200":
        description: Object including node, assignment and assignmentFor relationship
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
          
permissions:
  get:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
    description: Get Node's Permissions
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns array of objects
        schema:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Administrator
              _type:
                type: string
                example: Group
              accessLevel:
                type: string
                example: manager
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

relationship:
  parameters:
    - name: nodetype
      in: path
      description: Source Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Source Node Id
      required: true
      type: string
    - name: relname
      in: path
      description: Relationship Name
      required: true
      type: string
    - name: relId
      in: path
      description: Relationship Id
      required: true
      type: string
  put:
    deprecated: true
    security:
      - JWT: []
    description: 'Update Relationship - [REPLACED BY] PATCH /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}/{relationshipId}'
    tags:
      - Deprecated
    responses:
      '200':
        description: Returns updated relationship
        schema:
          $ref: '../definitions/relationships.yaml#/Relationship'
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
  delete:
    deprecated: true
    security:
      - JWT: []
    description: "Delete a Relationship - [REPLACED BY] DELETE /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}/{relationshipId}"
    tags:
      - Deprecated
    responses:
      "200":
        description: "Returns string: 'Successfully deleted.'"
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

allRelationships:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
    - name: nodeId
      in: path
      description: Node Id
      required: true
      type: string
  get:
    deprecated: true
    security:
      - JWT: []
    description: Get Relationships
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns array of objects
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

reverseRelatedNodes:
  post:
    deprecated: true
    security:
      - JWT: []
    parameters:
      - name: nodetype
        in: path
        description: Nodetype Name
        required: true
        type: string
      - name: nodeId
        in: path
        description: Node Id
        required: true
        type: string
      - name: content
        in: body
        description: "Relationship Ids"
        required: true
        schema:
          type: object
          required:
            - relationships
          properties:
            relationship:
              type: string
    description: Get Reverse Related Nodes - [ REPLACED BY ] GET /nodes/{nodetype}/{nodeId}/relationships/{relationshipName}?reverse=true
    tags:
      - Deprecated
    responses:
      "200":
        description: Returns array of nodes
        schema:
          type: array
          items:
            $ref: '../definitions/nodes.yaml#/Node'
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'
  
updateStateConfig:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
  put:
    deprecated: true
    security:
      - JWT: []
    description: Update Nodes Lockable State - [ REPLACED BY ] PUT /nodetypes/{nodetype}/updatedStateConfig
    tags:
      - Deprecated
    responses:
      "200":
        description: object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'

updatePermission:
  parameters:
    - name: nodetype
      in: path
      description: Nodetype Name
      required: true
      type: string
  post:
    deprecated: true
    security:
      - JWT: []
    description: Create default nodes access through their PermissionSet - [ REPLACED BY ] POST /nodetypes/{nodetype}/updatePermission
    tags:
      - Deprecated
    responses:
      "200":
        description: object
      '401':
        $ref: '../responses/errors.yaml#/401'
      '403':
        $ref: '../responses/errors.yaml#/403'
      '404':
        $ref: '../responses/errors.yaml#/404'
      '500':
        $ref: '../responses/errors.yaml#/500'